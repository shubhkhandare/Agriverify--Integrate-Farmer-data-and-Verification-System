-- 1. AREA ALLOCATED FOR CROP

SELECT C.CROP_NAME, SUM(LCA.AREA_ALLOCATED) AS TOTAL_AREA
FROM CROP C
JOIN LAND_CROP_ALLOCATION LCA ON C.CROP_ID = LCA.CROP_ID
GROUP BY C.CROP_NAME
ORDER BY TOTAL_AREA DESC;

-- 2. TOTAL LAND AREA OWNED BY EACH FARMER

SELECT F.FARMER_ID, F.FIRST_NAME, F.LAST_NAME, SUM(L.LAND_AREA) AS TOTAL_LAND_AREA
FROM FARMER F
JOIN LAND L ON F.FARMER_ID = L.FARMER_ID
GROUP BY F.FARMER_ID, F.FIRST_NAME, F.LAST_NAME;

-- 3. AVERAGE YIELD PER CROP

SELECT C.CROP_NAME, AVG(CI.YIELD) AS AVG_YIELD
FROM CROP_INCOME CI
JOIN LAND_CROP_ALLOCATION LCA ON CI.ALLOCATION_ID = LCA.ALLOCATION_ID
JOIN CROP C ON LCA.CROP_ID = C.CROP_ID
GROUP BY C.CROP_NAME;

-- 4. LIST OF FARMERS WITH PENDING LOANS

SELECT F.FARMER_ID, F.FIRST_NAME, F.LAST_NAME, L.LOAN_TYPE, L.LOAN_STATUS
FROM FARMER F
JOIN FINANCIAL_DETAILS FD ON F.FARMER_ID = FD.FARMER_ID
JOIN LOAN L ON FD.FINANCIAL_ID = L.FINANCIAL_ID
WHERE L.LOAN_STATUS = 'PENDING';

-- 5. FARMERS ELIGIBLE FOR A SCHEME BASED ON TOTAL LAND AREA (> 2 ACRES)

SELECT F.FARMER_ID, F.FIRST_NAME, F.LAST_NAME, SUM(L.LAND_AREA) AS TOTAL_LAND_AREA
FROM FARMER F
JOIN LAND L ON F.FARMER_ID = L.FARMER_ID
GROUP BY F.FARMER_ID, F.FIRST_NAME, F.LAST_NAME
HAVING SUM(L.LAND_AREA) > 2;

-- 6. AREA ALLOCATED FOR CROP BY VILLAGE

SELECT A.VILLAGE, C.CROP_NAME, SUM(LCA.AREA_ALLOCATED) AS TOTAL_AREA
FROM ADDRESS A
JOIN LAND L ON A.FARMER_ID = L.FARMER_ID
JOIN LAND_CROP_ALLOCATION LCA ON L.LAND_ID = LCA.LAND_ID
JOIN CROP C ON LCA.CROP_ID = C.CROP_ID
GROUP BY A.VILLAGE, C.CROP_NAME;

-- 7. CHECK FARMER ELIGIBILITY FOR A SCHEME (FUNCTION)

CREATE OR REPLACE FUNCTION IS_FARMER_ELIGIBLE_FOR_SCHEME (P_FARMER_ID NUMBER)
RETURN VARCHAR2
IS
    V_TOTAL_LAND NUMBER;
BEGIN
    SELECT SUM(L.LAND_AREA)
    INTO V_TOTAL_LAND
    FROM LAND L
    WHERE L.FARMER_ID = P_FARMER_ID;

    IF V_TOTAL_LAND <= 2 THEN
        RETURN 'Eligible';
    ELSE
        RETURN 'Not Eligible';
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Not Eligible';
END;


SELECT IS_FARMER_ELIGIBLE_FOR_SCHEME(5) FROM DUAL;

-- 8. UPDATE EXPIRED GOVERNMENT SCHEMES (PROCEDURE)

CREATE OR REPLACE PROCEDURE UPDATE_EXPIRED_SCHEMES AS
BEGIN
    UPDATE GOVERMENT_SCHEME
    SET STATUS = 'Expired'
    WHERE END_DATE < SYSDATE AND STATUS = 'Active';

    COMMIT;
END;


EXEC UPDATE_EXPIRED_SCHEMES;



---9. FARMER DETAILS

SELECT F.FARMER_ID, F.FIRST_NAME, F.LAST_NAME, SUM(L.LAND_AREA) TOTAL_LAND,
SUM(CI.REVENUE) AS CROP_INCOME
FROM FARMER F JOIN LAND L
ON F.FARMER_ID = L.FARMER_ID
JOIN LAND_CROP_ALLOCATION LCA
ON L.LAND_ID = LCA.LAND_ID
JOIN CROP_INCOME CI
ON LCA.ALLOCATION_ID = CI.ALLOCATION_ID
GROUP BY F.FARMER_ID, F.FIRST_NAME, F.LAST_NAME;